{"version":3,"sources":["OnePage.js","serviceWorker.js","index.js","logo.svg"],"names":["theme","createMuiTheme","palette","primary","main","secondary","typography","useNextVariants","OnePage","react_default","a","createElement","core_styles","Fragment","CssBaseline_default","className","src","logo","alt","Button_default","variant","color","href","Icon_default","Typography_default","gutterBottom","Boolean","window","location","hostname","match","ReactDOM","render","src_OnePage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mPAUMA,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,YAErBE,WAAY,CAAEC,iBAAiB,KA+DjBC,MA5DhB,WAEE,OACEC,EAAAC,EAAAC,cAACC,EAAA,iBAAD,CAAkBZ,MAAOA,GACvBS,EAAAC,EAAAC,cAACF,EAAAC,EAAMG,SAAP,KACEJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,MACAD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QAEbN,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAMF,UAAU,aAAaG,IAAI,UAG7CT,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aAEbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UAEbN,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,QAAQ,YAAYC,MAAM,UAAUC,KAAK,mBAAmBP,UAAU,UAE5EN,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAMK,UAAU,YAAhB,QACAN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAhB,oBAOJN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UAEbN,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,QAAQ,YAAYC,MAAM,UAAUC,KAAK,uBAAuBP,UAAU,UAEhFN,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAMK,UAAU,YAAhB,SACAN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAhB,mBASJN,EAAAC,EAAAC,cAAA,cAEAF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cAEfN,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAYU,QAAQ,UAAUK,cAAY,EAACJ,MAAM,aAAjD,sBACAZ,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAYU,QAAQ,UAAUK,cAAY,EAACJ,MAAM,aAAjD,2CACAZ,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAYU,QAAQ,UAAUK,cAAY,EAACJ,MAAM,aAAjD,wCACAZ,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAYU,QAAQ,UAAUK,cAAY,EAACJ,MAAM,YAAYN,UAAU,YAAvE,yCCtDMW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAAaC,SAASC,eAAe,SD4H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.71d0ffb6.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport 'typeface-roboto';\nimport Icon from '@material-ui/core/Icon';\nimport './styles.css'\nimport logo from './logo.svg';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#007bff' },\n    secondary: { main: '#ffffff' },\n  },\n  typography: { useNextVariants: true },\n});\n\nfunction OnePage() {\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <React.Fragment>\n        <CssBaseline />\n        <div className=\"App\">\n          <div className=\"Main\">\n\n            <img src={logo} className=\"Veber-logo\" alt=\"logo\" />\n\n          </div>\n          <div className=\"Footer\">\n            <div className=\"ButtonBox\">\n\n              <div className=\"Column\">\n\n                <Button variant=\"contained\" color=\"primary\" href=\"tel:+37258504843\" className=\"Button\">\n                  \n                  <Icon className=\"leftIcon\">call</Icon>\n                  <span className=\"buttonText\">\n                    +372 5372 1200\n                </span>\n\n                </Button>\n              </div>\n\n              <div className=\"Column\">\n\n                <Button variant=\"contained\" color=\"primary\" href=\"mailto:info@veber.ee\" className=\"Button\">\n                  \n                  <Icon className=\"leftIcon\">email</Icon>\n                  <span className=\"buttonText\">\n                    info@veber.ee\n                </span>\n                \n\n                </Button>\n\n              </div>\n\n              <break></break>\n\n              <div className=\"ColumnText\">\n\n              <Typography variant=\"caption\" gutterBottom color=\"secondary\">Veber Ehitus OÃœ</Typography>\n              <Typography variant=\"caption\" gutterBottom color=\"secondary\">Uus-Kalamaja 5, Tallinn, 10415 Harjumaa</Typography>\n              <Typography variant=\"caption\" gutterBottom color=\"secondary\">Reg. nr. 14460351, KMKR: EE102110160</Typography>\n              <Typography variant=\"caption\" gutterBottom color=\"secondary\" className=\"lastItem\">SEB Pank: EE851010220278730228</Typography>\n              </div>\n\n            </div>\n\n          </div>\n        </div>\n      </React.Fragment>\n    </MuiThemeProvider>\n  );\n}\n\nexport default (OnePage);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport OnePage from './OnePage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<OnePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.2c58b8dd.svg\";"],"sourceRoot":""}